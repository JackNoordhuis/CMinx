# Generated from /Users/jack/Development/python/CMinx/src/cminx/parser/CMake.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,242,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,2,1,2,5,2,52,8,2,10,2,12,
        2,55,9,2,1,2,1,2,5,2,59,8,2,10,2,12,2,62,9,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,4,1,4,5,4,72,8,4,10,4,12,4,75,9,4,1,5,1,5,5,5,79,8,5,10,5,
        12,5,82,9,5,1,5,1,5,1,6,5,6,87,8,6,10,6,12,6,90,9,6,1,6,1,6,1,6,
        1,6,1,6,1,7,5,7,98,8,7,10,7,12,7,101,9,7,1,7,1,7,1,7,1,7,1,8,1,8,
        5,8,109,8,8,10,8,12,8,112,9,8,1,9,1,9,4,9,116,8,9,11,9,12,9,117,
        1,10,1,10,1,10,3,10,123,8,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,3,12,134,8,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,
        143,8,14,10,14,12,14,146,9,14,1,14,1,14,1,15,1,15,1,15,3,15,153,
        8,15,1,15,3,15,156,8,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,17,1,17,5,17,168,8,17,10,17,12,17,171,9,17,1,17,3,17,174,8,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,5,19,
        188,8,19,10,19,12,19,191,9,19,1,19,1,19,5,19,195,8,19,10,19,12,19,
        198,9,19,1,19,1,19,5,19,202,8,19,10,19,12,19,205,9,19,1,19,1,19,
        5,19,209,8,19,10,19,12,19,212,9,19,3,19,214,8,19,1,19,1,19,3,19,
        218,8,19,1,19,3,19,221,8,19,1,19,1,19,1,20,1,20,3,20,227,8,20,1,
        20,4,20,230,8,20,11,20,12,20,231,1,20,1,20,1,21,4,21,237,8,21,11,
        21,12,21,238,1,21,1,21,6,53,60,80,88,99,169,0,22,1,1,3,2,5,3,7,0,
        9,0,11,4,13,0,15,0,17,5,19,6,21,7,23,0,25,0,27,0,29,8,31,0,33,9,
        35,0,37,10,39,11,41,12,43,13,1,0,13,1,0,92,92,3,0,45,45,65,90,97,
        122,4,0,45,45,48,57,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,6,0,9,10,13,13,32,32,34,35,40,41,92,92,4,0,48,
        57,59,59,65,90,97,122,2,0,34,34,92,92,4,0,10,10,13,13,61,61,91,91,
        2,0,10,10,13,13,3,0,10,10,13,13,91,91,1,1,10,10,2,0,9,9,32,32,265,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,11,1,0,0,0,0,17,1,0,0,0,0,
        19,1,0,0,0,0,21,1,0,0,0,0,29,1,0,0,0,0,33,1,0,0,0,0,37,1,0,0,0,0,
        39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,47,1,0,0,0,5,
        49,1,0,0,0,7,65,1,0,0,0,9,69,1,0,0,0,11,76,1,0,0,0,13,88,1,0,0,0,
        15,99,1,0,0,0,17,106,1,0,0,0,19,115,1,0,0,0,21,122,1,0,0,0,23,124,
        1,0,0,0,25,133,1,0,0,0,27,135,1,0,0,0,29,138,1,0,0,0,31,149,1,0,
        0,0,33,157,1,0,0,0,35,173,1,0,0,0,37,175,1,0,0,0,39,183,1,0,0,0,
        41,229,1,0,0,0,43,236,1,0,0,0,45,46,5,40,0,0,46,2,1,0,0,0,47,48,
        5,41,0,0,48,4,1,0,0,0,49,53,3,13,6,0,50,52,9,0,0,0,51,50,1,0,0,0,
        52,55,1,0,0,0,53,54,1,0,0,0,53,51,1,0,0,0,54,56,1,0,0,0,55,53,1,
        0,0,0,56,60,3,7,3,0,57,59,9,0,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,
        61,1,0,0,0,60,58,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,3,15,
        7,0,64,6,1,0,0,0,65,66,8,0,0,0,66,67,5,64,0,0,67,68,3,9,4,0,68,8,
        1,0,0,0,69,73,7,1,0,0,70,72,7,2,0,0,71,70,1,0,0,0,72,75,1,0,0,0,
        73,71,1,0,0,0,73,74,1,0,0,0,74,10,1,0,0,0,75,73,1,0,0,0,76,80,3,
        13,6,0,77,79,9,0,0,0,78,77,1,0,0,0,79,82,1,0,0,0,80,81,1,0,0,0,80,
        78,1,0,0,0,81,83,1,0,0,0,82,80,1,0,0,0,83,84,3,15,7,0,84,12,1,0,
        0,0,85,87,3,43,21,0,86,85,1,0,0,0,87,90,1,0,0,0,88,89,1,0,0,0,88,
        86,1,0,0,0,89,91,1,0,0,0,90,88,1,0,0,0,91,92,5,35,0,0,92,93,5,91,
        0,0,93,94,5,91,0,0,94,95,5,91,0,0,95,14,1,0,0,0,96,98,3,43,21,0,
        97,96,1,0,0,0,98,101,1,0,0,0,99,100,1,0,0,0,99,97,1,0,0,0,100,102,
        1,0,0,0,101,99,1,0,0,0,102,103,5,35,0,0,103,104,5,93,0,0,104,105,
        5,93,0,0,105,16,1,0,0,0,106,110,7,3,0,0,107,109,7,4,0,0,108,107,
        1,0,0,0,109,112,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,18,1,
        0,0,0,112,110,1,0,0,0,113,116,8,5,0,0,114,116,3,21,10,0,115,113,
        1,0,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,
        1,0,0,0,118,20,1,0,0,0,119,123,3,23,11,0,120,123,3,25,12,0,121,123,
        3,27,13,0,122,119,1,0,0,0,122,120,1,0,0,0,122,121,1,0,0,0,123,22,
        1,0,0,0,124,125,5,92,0,0,125,126,8,6,0,0,126,24,1,0,0,0,127,128,
        5,92,0,0,128,134,5,116,0,0,129,130,5,92,0,0,130,134,5,114,0,0,131,
        132,5,92,0,0,132,134,5,110,0,0,133,127,1,0,0,0,133,129,1,0,0,0,133,
        131,1,0,0,0,134,26,1,0,0,0,135,136,5,92,0,0,136,137,5,59,0,0,137,
        28,1,0,0,0,138,144,5,34,0,0,139,143,8,7,0,0,140,143,3,21,10,0,141,
        143,3,31,15,0,142,139,1,0,0,0,142,140,1,0,0,0,142,141,1,0,0,0,143,
        146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,147,1,0,0,0,146,
        144,1,0,0,0,147,148,5,34,0,0,148,30,1,0,0,0,149,155,5,92,0,0,150,
        152,5,13,0,0,151,153,5,10,0,0,152,151,1,0,0,0,152,153,1,0,0,0,153,
        156,1,0,0,0,154,156,5,10,0,0,155,150,1,0,0,0,155,154,1,0,0,0,156,
        32,1,0,0,0,157,158,5,91,0,0,158,159,3,35,17,0,159,160,5,93,0,0,160,
        34,1,0,0,0,161,162,5,61,0,0,162,163,3,35,17,0,163,164,5,61,0,0,164,
        174,1,0,0,0,165,169,5,91,0,0,166,168,9,0,0,0,167,166,1,0,0,0,168,
        171,1,0,0,0,169,170,1,0,0,0,169,167,1,0,0,0,170,172,1,0,0,0,171,
        169,1,0,0,0,172,174,5,93,0,0,173,161,1,0,0,0,173,165,1,0,0,0,174,
        36,1,0,0,0,175,176,5,35,0,0,176,177,5,91,0,0,177,178,1,0,0,0,178,
        179,3,35,17,0,179,180,5,93,0,0,180,181,1,0,0,0,181,182,6,18,0,0,
        182,38,1,0,0,0,183,213,5,35,0,0,184,214,1,0,0,0,185,189,5,91,0,0,
        186,188,5,61,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,
        189,190,1,0,0,0,190,214,1,0,0,0,191,189,1,0,0,0,192,196,5,91,0,0,
        193,195,5,61,0,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,
        196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,203,8,8,0,0,
        200,202,8,9,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,
        203,204,1,0,0,0,204,214,1,0,0,0,205,203,1,0,0,0,206,210,8,10,0,0,
        207,209,8,9,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,
        210,211,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,213,184,1,0,0,0,
        213,185,1,0,0,0,213,192,1,0,0,0,213,206,1,0,0,0,214,220,1,0,0,0,
        215,217,5,13,0,0,216,218,5,10,0,0,217,216,1,0,0,0,217,218,1,0,0,
        0,218,221,1,0,0,0,219,221,7,11,0,0,220,215,1,0,0,0,220,219,1,0,0,
        0,221,222,1,0,0,0,222,223,6,19,0,0,223,40,1,0,0,0,224,226,5,13,0,
        0,225,227,5,10,0,0,226,225,1,0,0,0,226,227,1,0,0,0,227,230,1,0,0,
        0,228,230,5,10,0,0,229,224,1,0,0,0,229,228,1,0,0,0,230,231,1,0,0,
        0,231,229,1,0,0,0,231,232,1,0,0,0,232,233,1,0,0,0,233,234,6,20,0,
        0,234,42,1,0,0,0,235,237,7,12,0,0,236,235,1,0,0,0,237,238,1,0,0,
        0,238,236,1,0,0,0,238,239,1,0,0,0,239,240,1,0,0,0,240,241,6,21,0,
        0,241,44,1,0,0,0,29,0,53,60,73,80,88,99,110,115,117,122,133,142,
        144,152,155,169,173,189,196,203,210,213,217,220,226,229,231,238,
        1,6,0,0
    ]

class CMakeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    Command_DocBlock = 3
    DocBlock = 4
    Identifier = 5
    Unquoted_argument = 6
    Escape_sequence = 7
    Quoted_argument = 8
    Bracket_argument = 9
    Bracket_comment = 10
    Line_comment = 11
    Newline = 12
    Space = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'" ]

    symbolicNames = [ "<INVALID>",
            "Command_DocBlock", "DocBlock", "Identifier", "Unquoted_argument", 
            "Escape_sequence", "Quoted_argument", "Bracket_argument", "Bracket_comment", 
            "Line_comment", "Newline", "Space" ]

    ruleNames = [ "T__0", "T__1", "Command_DocBlock", "Command_DocString", 
                  "DocBlock_Command_Identifier", "DocBlock", "DocBlock_Start", 
                  "DocBlock_End", "Identifier", "Unquoted_argument", "Escape_sequence", 
                  "Escape_identity", "Escape_encoded", "Escape_semicolon", 
                  "Quoted_argument", "Quoted_cont", "Bracket_argument", 
                  "Bracket_arg_nested", "Bracket_comment", "Line_comment", 
                  "Newline", "Space" ]

    grammarFileName = "CMake.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


